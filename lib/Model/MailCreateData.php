<?php
/**
 * MailCreateData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IONOS\MailConfigurationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SPDX-FileCopyrightText: 2025 STRATO GmbH
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

/**
 * Event Notification Handler
 *
 * This is the API client for the Mail Configuration API
 *
 * The version of the OpenAPI document: 1.0.27-SNAPSHOT
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IONOS\MailConfigurationAPI\Client\Model;

use \ArrayAccess;
use \IONOS\MailConfigurationAPI\Client\ObjectSerializer;

/**
 * MailCreateData Class Doc Comment
 *
 * @category Class
 * @package  IONOS\MailConfigurationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MailCreateData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MailCreateData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nextcloudUsername' => 'string',
        'mailaddress' => 'string',
        'passwordType' => 'string',
        'password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nextcloudUsername' => null,
        'mailaddress' => null,
        'passwordType' => null,
        'password' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'nextcloudUsername' => false,
        'mailaddress' => false,
        'passwordType' => false,
        'password' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nextcloudUsername' => 'nextcloudUsername',
        'mailaddress' => 'mailaddress',
        'passwordType' => 'passwordType',
        'password' => 'password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nextcloudUsername' => 'setNextcloudUsername',
        'mailaddress' => 'setMailaddress',
        'passwordType' => 'setPasswordType',
        'password' => 'setPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nextcloudUsername' => 'getNextcloudUsername',
        'mailaddress' => 'getMailaddress',
        'passwordType' => 'getPasswordType',
        'password' => 'getPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PASSWORD_TYPE_SERVICE = 'SERVICE';
    public const PASSWORD_TYPE_USER = 'USER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordTypeAllowableValues()
    {
        return [
            self::PASSWORD_TYPE_SERVICE,
            self::PASSWORD_TYPE_USER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('nextcloudUsername', $data ?? [], null);
        $this->setIfExists('mailaddress', $data ?? [], null);
        $this->setIfExists('passwordType', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nextcloudUsername'] === null) {
            $invalidProperties[] = "'nextcloudUsername' can't be null";
        }
        if ((mb_strlen($this->container['nextcloudUsername']) < 1)) {
            $invalidProperties[] = "invalid value for 'nextcloudUsername', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mailaddress'] === null) {
            $invalidProperties[] = "'mailaddress' can't be null";
        }
        if ((mb_strlen($this->container['mailaddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'mailaddress', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['passwordType'] === null) {
            $invalidProperties[] = "'passwordType' can't be null";
        }
        $allowedValues = $this->getPasswordTypeAllowableValues();
        if (!is_null($this->container['passwordType']) && !in_array($this->container['passwordType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'passwordType', must be one of '%s'",
                $this->container['passwordType'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['passwordType']) < 1)) {
            $invalidProperties[] = "invalid value for 'passwordType', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nextcloudUsername
     *
     * @return string
     */
    public function getNextcloudUsername()
    {
        return $this->container['nextcloudUsername'];
    }

    /**
     * Sets nextcloudUsername
     *
     * @param string $nextcloudUsername username of the Nextcloud user account to which the mail account should be created
     *
     * @return self
     */
    public function setNextcloudUsername($nextcloudUsername)
    {
        if (is_null($nextcloudUsername)) {
            throw new \InvalidArgumentException('non-nullable nextcloudUsername cannot be null');
        }

        if ((mb_strlen($nextcloudUsername) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nextcloudUsername when calling MailCreateData., must be bigger than or equal to 1.');
        }

        $this->container['nextcloudUsername'] = $nextcloudUsername;

        return $this;
    }

    /**
     * Gets mailaddress
     *
     * @return string
     */
    public function getMailaddress()
    {
        return $this->container['mailaddress'];
    }

    /**
     * Sets mailaddress
     *
     * @param string $mailaddress mail address to be created
     *
     * @return self
     */
    public function setMailaddress($mailaddress)
    {
        if (is_null($mailaddress)) {
            throw new \InvalidArgumentException('non-nullable mailaddress cannot be null');
        }

        if ((mb_strlen($mailaddress) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mailaddress when calling MailCreateData., must be bigger than or equal to 1.');
        }

        $this->container['mailaddress'] = $mailaddress;

        return $this;
    }

    /**
     * Gets passwordType
     *
     * @return string
     */
    public function getPasswordType()
    {
        return $this->container['passwordType'];
    }

    /**
     * Sets passwordType
     *
     * @param string $passwordType Password for the mail account to be created. If passwordType is SERVICE, this is the service password, it is unkown to the user and mailbox can be exlusivly used within nextcloud mail app. If passwordType is USER, this is the user password, it is known to the user and mailbox can be used with any mail client.
     *
     * @return self
     */
    public function setPasswordType($passwordType)
    {
        if (is_null($passwordType)) {
            throw new \InvalidArgumentException('non-nullable passwordType cannot be null');
        }
        $allowedValues = $this->getPasswordTypeAllowableValues();
        if (!in_array($passwordType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'passwordType', must be one of '%s'",
                    $passwordType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($passwordType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $passwordType when calling MailCreateData., must be bigger than or equal to 1.');
        }

        $this->container['passwordType'] = $passwordType;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password value
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling MailCreateData., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


