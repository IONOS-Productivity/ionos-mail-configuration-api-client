<?php

/**
 * MailConfigurationAPIApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  IONOS\MailConfigurationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

declare(strict_types=1);

/**
 * SPDX-FileCopyrightText: 2025 STRATO GmbH
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

/**
 * Event Configuration Handler
 *
 * This is the API client for the Mail Configuration API
 *
 * The version of the OpenAPI document: 2.0.0-20251031093901
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */


/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace IONOS\MailConfigurationAPI\Client\Test\Api;

use \IONOS\MailConfigurationAPI\Client\Configuration;
use \IONOS\MailConfigurationAPI\Client\ApiException;
use \IONOS\MailConfigurationAPI\Client\ObjectSerializer;
use \IONOS\MailConfigurationAPI\Client\Api\MailConfigurationAPIApi;
use \IONOS\MailConfigurationAPI\Client\Model\MailCreateData;
use \IONOS\MailConfigurationAPI\Client\Model\PatchMailRequest;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\RequestException;
use PHPUnit\Framework\TestCase;

/**
 * MailConfigurationAPIApiTest Class Doc Comment
 *
 * @category Class
 * @package  IONOS\MailConfigurationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MailConfigurationAPIApiTest extends TestCase
{
    /**
     * @var MailConfigurationAPIApi
     */
    protected $api;

    /**
     * @var MockHandler
     */
    protected $mockHandler;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->mockHandler = new MockHandler();
        $handlerStack = HandlerStack::create($this->mockHandler);
        $client = new Client(['handler' => $handlerStack]);
        $config = Configuration::getDefaultConfiguration();
        $this->api = new MailConfigurationAPIApi($client, $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createMailbox
     *
     * Creates a mailbox on IONOS plattform that is used for nextcloud user.
     *
     */
    public function testCreateMailbox()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $mailCreateData = new \IONOS\MailConfigurationAPI\Client\Model\MailCreateData();

        // Execute the API call
        $result = $this->api->createMailbox($brand, $extRef, $mailCreateData);

        // Verify the result
        $this->assertNotNull($result);
    }

    /**
     * Test case for createMailbox with HTTP info
     *
     * Creates a mailbox on IONOS plattform that is used for nextcloud user.
     *
     */
    public function testCreateMailboxWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $mailCreateData = new \IONOS\MailConfigurationAPI\Client\Model\MailCreateData();

        // Execute the API call with HTTP info
        $result = $this->api->createMailboxWithHttpInfo($brand, $extRef, $mailCreateData);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNotNull($result[0]); // Response data
        $this->assertEquals(200, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for createMailbox with exception
     *
     * Creates a mailbox on IONOS plattform that is used for nextcloud user.
     *
     */
    public function testCreateMailboxException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $mailCreateData = new \IONOS\MailConfigurationAPI\Client\Model\MailCreateData();

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->createMailbox($brand, $extRef, $mailCreateData);
    }

    /**
     * Test case for deleteAppPassword
     *
     * Deletes the app credentials for the given appname.
     *
     */
    public function testDeleteAppPassword()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Execute the API call
        $this->api->deleteAppPassword($brand, $extRef, $nextcloudUserId, $appname);

        // If we get here without exception, the test passes
        $this->assertTrue(true);
    }

    /**
     * Test case for deleteAppPassword with HTTP info
     *
     * Deletes the app credentials for the given appname.
     *
     */
    public function testDeleteAppPasswordWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Execute the API call with HTTP info
        $result = $this->api->deleteAppPasswordWithHttpInfo($brand, $extRef, $nextcloudUserId, $appname);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNull($result[0]); // No response data expected
        $this->assertEquals(204, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for deleteAppPassword with exception
     *
     * Deletes the app credentials for the given appname.
     *
     */
    public function testDeleteAppPasswordException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->deleteAppPassword($brand, $extRef, $nextcloudUserId, $appname);
    }

    /**
     * Test case for deleteMailbox
     *
     * Deletes mailbox for given nextcloud user.
     *
     */
    public function testDeleteMailbox()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Execute the API call
        $this->api->deleteMailbox($brand, $extRef, $nextcloudUserId);

        // If we get here without exception, the test passes
        $this->assertTrue(true);
    }

    /**
     * Test case for deleteMailbox with HTTP info
     *
     * Deletes mailbox for given nextcloud user.
     *
     */
    public function testDeleteMailboxWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Execute the API call with HTTP info
        $result = $this->api->deleteMailboxWithHttpInfo($brand, $extRef, $nextcloudUserId);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNull($result[0]); // No response data expected
        $this->assertEquals(204, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for deleteMailbox with exception
     *
     * Deletes mailbox for given nextcloud user.
     *
     */
    public function testDeleteMailboxException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->deleteMailbox($brand, $extRef, $nextcloudUserId);
    }

    /**
     * Test case for getAllFunctionalAccounts
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetAllFunctionalAccounts()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';

        // Execute the API call
        $result = $this->api->getAllFunctionalAccounts($brand, $extRef);

        // Verify the result
        $this->assertNotNull($result);
    }

    /**
     * Test case for getAllFunctionalAccounts with HTTP info
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetAllFunctionalAccountsWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';

        // Execute the API call with HTTP info
        $result = $this->api->getAllFunctionalAccountsWithHttpInfo($brand, $extRef);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNotNull($result[0]); // Response data
        $this->assertEquals(200, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for getAllFunctionalAccounts with exception
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetAllFunctionalAccountsException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->getAllFunctionalAccounts($brand, $extRef);
    }

    /**
     * Test case for getFunctionalAccount
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetFunctionalAccount()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Execute the API call
        $result = $this->api->getFunctionalAccount($brand, $extRef, $nextcloudUserId);

        // Verify the result
        $this->assertNotNull($result);
    }

    /**
     * Test case for getFunctionalAccount with HTTP info
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetFunctionalAccountWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Execute the API call with HTTP info
        $result = $this->api->getFunctionalAccountWithHttpInfo($brand, $extRef, $nextcloudUserId);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNotNull($result[0]); // Response data
        $this->assertEquals(200, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for getFunctionalAccount with exception
     *
     * Returns all functional mailboxes for the given brand and extRef.
     *
     */
    public function testGetFunctionalAccountException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->getFunctionalAccount($brand, $extRef, $nextcloudUserId);
    }

    /**
     * Test case for patchMailbox
     *
     * update maildata.
     *
     */
    public function testPatchMailbox()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $patchMailRequest = new \IONOS\MailConfigurationAPI\Client\Model\PatchMailRequest();

        // Execute the API call
        $this->api->patchMailbox($brand, $extRef, $nextcloudUserId, $patchMailRequest);

        // If we get here without exception, the test passes
        $this->assertTrue(true);
    }

    /**
     * Test case for patchMailbox with HTTP info
     *
     * update maildata.
     *
     */
    public function testPatchMailboxWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '';
        $this->mockHandler->append(new Response(204, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $patchMailRequest = new \IONOS\MailConfigurationAPI\Client\Model\PatchMailRequest();

        // Execute the API call with HTTP info
        $result = $this->api->patchMailboxWithHttpInfo($brand, $extRef, $nextcloudUserId, $patchMailRequest);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNull($result[0]); // No response data expected
        $this->assertEquals(204, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for patchMailbox with exception
     *
     * update maildata.
     *
     */
    public function testPatchMailboxException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $patchMailRequest = new \IONOS\MailConfigurationAPI\Client\Model\PatchMailRequest();

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->patchMailbox($brand, $extRef, $nextcloudUserId, $patchMailRequest);
    }

    /**
     * Test case for setAppPassword
     *
     * A new password for provided appname will be set and returned.
     *
     */
    public function testSetAppPassword()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, [], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Execute the API call
        $result = $this->api->setAppPassword($brand, $extRef, $nextcloudUserId, $appname);

        // Verify the result
        $this->assertNotNull($result);
    }

    /**
     * Test case for setAppPassword with HTTP info
     *
     * A new password for provided appname will be set and returned.
     *
     */
    public function testSetAppPasswordWithHttpInfo()
    {
        // Mock successful response
        $responseBody = '{"example": "data"}';
        $this->mockHandler->append(new Response(200, ['Content-Type' => 'application/json'], $responseBody));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Execute the API call with HTTP info
        $result = $this->api->setAppPasswordWithHttpInfo($brand, $extRef, $nextcloudUserId, $appname);

        // Verify the result structure
        $this->assertIsArray($result);
        $this->assertCount(3, $result);
        $this->assertNotNull($result[0]); // Response data
        $this->assertEquals(200, $result[1]); // Status code
        $this->assertIsArray($result[2]); // Headers
    }

    /**
     * Test case for setAppPassword with exception
     *
     * A new password for provided appname will be set and returned.
     *
     */
    public function testSetAppPasswordException()
    {
        // Mock error response
        $this->mockHandler->append(new Response(400, [], '{"error": "Bad Request"}'));

        // Setup test parameters
        $brand = 'test_brand';
        $extRef = 'test_extRef';
        $nextcloudUserId = 'test_nextcloudUserId';
        $appname = 'test_appname';

        // Expect ApiException to be thrown
        $this->expectException(ApiException::class);

        // Execute the API call
        $this->api->setAppPassword($brand, $extRef, $nextcloudUserId, $appname);
    }
}
